a) I was stuck with counting the number of digits for which I had to refer back to the lectures. Then because of the number of exceptions that could have been raised in the safedistance function, my if statements were getting too long for me to keep a track of, so I converted all the conditions into a function called valid. This helped me manage my code easier. Finally, in the obey plan function, I couldn't determine a way to move the cursor in a particular cardinal direction using the variable "dir". For this, I had to refer to stack overflow, which helped me create the cardinal function, where I assigned each direction a cardinal number from the north in the clockwise direction and added conditions depending if the initial cursor was moving towards the end row/column or the starting row/column.
b) Pseudocode for the whole program:

include all libraries
Declaring prototype for function
int main()
create the grid and test asserts
Creat hascorrectForm
If character is digit, digitCnt++
If character== r or l or L or R: digitcnt=0
if character otherwise: break and return false
if digitcnt= 3; break and return false
if last char= digit: break and return false
else: true

declare valid
check if the given row and column is inside the gride and not a wall

declare determineSafeDistance
call valid function
    else return -1
repeatedly
    move in direction of dir specified

declare cardinal
    gives dirNo a directional value
    
declare oberyPlan
    use cardinal to assign an integer to each direction
Declares orientation of pointer after the moment of R and L
Store 2 digit numbers, if any
Move sr and sc depending upon the path

if coordinates match return true else false

c) ALL Tests used(no mishandled cases)

1) assert(hasCorrectForm("2R1r")) Detects correct plan is being accepted.

2) assert(!hasCorrectForm("1Lx")); Detects if hasCorrectForm heck presence of unknown character.

3) assert(determineSafeDistance(3, 1, 'N', 2) == 2); Checks if the correct safe distance is running successfully.

4)int len;
len = -999;  /
assert(obeyPlan(3,1, 3,4, 'S', "LL2R2r2L1R", len) == 0  &&  len == 7); To check if obeyPlan sets len.

5) assert(obeyPlan(3,1, 2,2, 'l', "LL2R2r2L1R", len) == 2); To check if the project can detect errors.

6) assert(obeyPlan(1,1, 4,4, 'e', "2r3l1l", len) == 0 && len == 6); Checking a correct plan with successful start and end point.

7) assert(determineSafeDistance(3, 1, 'q', 3) == -1); Checking if the function detects incorrect dir.

8) assert(!hasCorrectForm("w2+n3")); Checking if the fucntion returns false for symbol.

9) assert(obeyPlan(1,1, 1,1, 'e', "2rr2r", len) == 0 && len == 4); Checking for a succesful case.

10)  assert(obeyPlan(2,4, 1,1, 'n', "L1L2R1L", len) == 1 && len == 4); Checking for successful pass but without reaching the end point.
